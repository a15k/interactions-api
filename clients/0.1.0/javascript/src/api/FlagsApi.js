/**
 * Assessment Network Interactions API
 * Records interactions with content distributed by the Assessment Network.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `...a15k.org/v0/flags`.          While the API does support a default version, that version will change over          time and therefore should not be used in production code!  Some endpoints require an API key to be passed in the request header.  There are two          types of API keys: API tokens and API IDs.  An API token is used for more restricted          access.  Such tokens should not be shared with end users.  API IDs are used for less          restricted access and may be exposed to clients (e.g. through use in browser-side code).          Both keys are available to members through www.a15k.org. 
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'A15kInteractions/Error', 'A15kInteractions/Flag', 'A15kInteractions/FlagNew', 'A15kInteractions/FlagUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../A15kInteractions/Error'), require('../A15kInteractions/Flag'), require('../A15kInteractions/FlagNew'), require('../A15kInteractions/FlagUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.A15kInteractions) {
      root.A15kInteractions = {};
    }
    root.A15kInteractions.FlagsApi = factory(root.A15kInteractions.ApiClient, root.A15kInteractions.Error, root.A15kInteractions.Flag, root.A15kInteractions.FlagNew, root.A15kInteractions.FlagUpdate);
  }
}(this, function(ApiClient, Error, Flag, FlagNew, FlagUpdate) {
  'use strict';

  /**
   * Flags service.
   * @module api/FlagsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new FlagsApi. 
   * @alias module:api/FlagsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Flag some content
     * Adds a flag to some content for some user in some app.
     * @param {module:A15kInteractions/FlagNew} flag The flag data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/Flag} and HTTP response
     */
    this.createFlagWithHttpInfo = function(flag) {
      var postBody = flag;

      // verify the required parameter 'flag' is set
      if (flag === undefined || flag === null) {
        throw new Error("Missing the required parameter 'flag' when calling createFlag");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_id'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Flag;

      return this.apiClient.callApi(
        '/flags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Flag some content
     * Adds a flag to some content for some user in some app.
     * @param {module:A15kInteractions/FlagNew} flag The flag data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/Flag}
     */
    this.createFlag = function(flag) {
      return this.createFlagWithHttpInfo(flag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a flag
     * Delete a flag.  Anyone with the flag ID (very hard to guess) can delete it.
     * @param {String} id ID of the flag to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/Flag} and HTTP response
     */
    this.deleteFlagWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFlag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_id'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Flag;

      return this.apiClient.callApi(
        '/flags/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a flag
     * Delete a flag.  Anyone with the flag ID (very hard to guess) can delete it.
     * @param {String} id ID of the flag to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/Flag}
     */
    this.deleteFlag = function(id) {
      return this.deleteFlagWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a flag
     * Retrieve a flag.  Anyone with the flag ID (very hard to guess) can retrieve it.
     * @param {String} id ID of the flag to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/Flag} and HTTP response
     */
    this.getFlagWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFlag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_id'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Flag;

      return this.apiClient.callApi(
        '/flags/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a flag
     * Retrieve a flag.  Anyone with the flag ID (very hard to guess) can retrieve it.
     * @param {String} id ID of the flag to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/Flag}
     */
    this.getFlag = function(id) {
      return this.getFlagWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a flag
     * Update a flag with the provided values.
     * @param {String} id ID of the flag
     * @param {Object} opts Optional parameters
     * @param {module:A15kInteractions/FlagUpdate} opts.flag The flag data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/Flag} and HTTP response
     */
    this.updateFlagWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['flag'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFlag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_id'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Flag;

      return this.apiClient.callApi(
        '/flags', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a flag
     * Update a flag with the provided values.
     * @param {String} id ID of the flag
     * @param {Object} opts Optional parameters
     * @param {module:A15kInteractions/FlagUpdate} opts.flag The flag data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/Flag}
     */
    this.updateFlag = function(id, opts) {
      return this.updateFlagWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
