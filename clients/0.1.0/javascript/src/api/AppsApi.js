/**
 * Assessment Network Interactions API
 * Records interactions with content distributed by the Assessment Network.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `...a15k.org/v0/flags`.          While the API does support a default version, that version will change over          time and therefore should not be used in production code!  Some endpoints require an API key to be passed in the request header.  There are two          types of API keys: API tokens and API IDs.  An API token is used for more restricted          access.  Such tokens should not be shared with end users.  API IDs are used for less          restricted access and may be exposed to clients (e.g. through use in browser-side code).          Both keys are available to members through www.a15k.org. 
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'A15kInteractions/App', 'A15kInteractions/AppUpdate', 'A15kInteractions/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../A15kInteractions/App'), require('../A15kInteractions/AppUpdate'), require('../A15kInteractions/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.A15kInteractions) {
      root.A15kInteractions = {};
    }
    root.A15kInteractions.AppsApi = factory(root.A15kInteractions.ApiClient, root.A15kInteractions.App, root.A15kInteractions.AppUpdate, root.A15kInteractions.Error);
  }
}(this, function(ApiClient, App, AppUpdate, Error) {
  'use strict';

  /**
   * Apps service.
   * @module api/AppsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new AppsApi. 
   * @alias module:api/AppsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new app
     * Create a new app with some values pre-populated; does not take initial values
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupId ID under which the new app should be grouped (e.g. the UUID) of the app owner.  Can be used to later retrieve all apps in the same group at once.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/App} and HTTP response
     */
    this.createAppWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'group_id': opts['groupId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/apps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new app
     * Create a new app with some values pre-populated; does not take initial values
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupId ID under which the new app should be grouped (e.g. the UUID) of the app owner.  Can be used to later retrieve all apps in the same group at once.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/App}
     */
    this.createApp = function(opts) {
      return this.createAppWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an app
     * Delete the specified app
     * @param {String} id ID of the app to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/App} and HTTP response
     */
    this.deleteAppWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApp");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/apps/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an app
     * Delete the specified app
     * @param {String} id ID of the app to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/App}
     */
    this.deleteApp = function(id) {
      return this.deleteAppWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific app
     * Returns all information about a specific app
     * @param {String} id ID of the app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/App} and HTTP response
     */
    this.getAppWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApp");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/apps/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific app
     * Returns all information about a specific app
     * @param {String} id ID of the app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/App}
     */
    this.getApp = function(id) {
      return this.getAppWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all apps matching a query
     * Get all apps matching a query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupId ID under which apps are grouped (e.g. the UUID) of the app owner.If not provided, returns all apps.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:A15kInteractions/App>} and HTTP response
     */
    this.getAppsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'group_id': opts['groupId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [App];

      return this.apiClient.callApi(
        '/apps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all apps matching a query
     * Get all apps matching a query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupId ID under which apps are grouped (e.g. the UUID) of the app owner.If not provided, returns all apps.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:A15kInteractions/App>}
     */
    this.getApps = function(opts) {
      return this.getAppsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an app
     * Update an app with the provided values.
     * @param {String} id ID of the app
     * @param {Object} opts Optional parameters
     * @param {module:A15kInteractions/AppUpdate} opts.app The app data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:A15kInteractions/App} and HTTP response
     */
    this.updateAppWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['app'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateApp");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/apps/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an app
     * Update an app with the provided values.
     * @param {String} id ID of the app
     * @param {Object} opts Optional parameters
     * @param {module:A15kInteractions/AppUpdate} opts.app The app data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:A15kInteractions/App}
     */
    this.updateApp = function(id, opts) {
      return this.updateAppWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
