=begin
#Assessment Network Interactions API

#Records interactions with content distributed by the Assessment Network.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `...a15k.org/v0/flags`.          While the API does support a default version, that version will change over          time and therefore should not be used in production code!  Some endpoints require an API key to be passed in the request header.  There are two          types of API keys: API tokens and API IDs.  An API token is used for more restricted          access.  Such tokens should not be shared with end users.  API IDs are used for less          restricted access and may be exposed to clients (e.g. through use in browser-side code).          Both keys are available to members through www.a15k.org. 

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module A15kInteractions
  class RatingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Rate some content
    # Rates some content for some user in some app.  New ratings replace old ratings.
    # @param rating The rating data
    # @param [Hash] opts the optional parameters
    # @return [Rating]
    def create_rating(rating, opts = {})
      data, _status_code, _headers = create_rating_with_http_info(rating, opts)
      return data
    end

    # Rate some content
    # Rates some content for some user in some app.  New ratings replace old ratings.
    # @param rating The rating data
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rating, Fixnum, Hash)>] Rating data, response status code and response headers
    def create_rating_with_http_info(rating, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RatingsApi.create_rating ..."
      end
      # verify the required parameter 'rating' is set
      if @api_client.config.client_side_validation && rating.nil?
        fail ArgumentError, "Missing the required parameter 'rating' when calling RatingsApi.create_rating"
      end
      # resource path
      local_var_path = "/ratings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rating)
      auth_names = ['api_id']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rating')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingsApi#create_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a rating
    # Delete a rating.  Anyone with the rating ID (very hard to guess) can delete it.
    # @param id ID of the rating to delete
    # @param [Hash] opts the optional parameters
    # @return [Flag]
    def delete_rating(id, opts = {})
      data, _status_code, _headers = delete_rating_with_http_info(id, opts)
      return data
    end

    # Delete a rating
    # Delete a rating.  Anyone with the rating ID (very hard to guess) can delete it.
    # @param id ID of the rating to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(Flag, Fixnum, Hash)>] Flag data, response status code and response headers
    def delete_rating_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RatingsApi.delete_rating ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RatingsApi.delete_rating"
      end
      # resource path
      local_var_path = "/ratings/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_id']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Flag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingsApi#delete_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a rating
    # Retrieve a rating.  Anyone with the rating ID (very hard to guess) can retrieve it.
    # @param id ID of the rating to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Rating]
    def get_rating(id, opts = {})
      data, _status_code, _headers = get_rating_with_http_info(id, opts)
      return data
    end

    # Retrieve a rating
    # Retrieve a rating.  Anyone with the rating ID (very hard to guess) can retrieve it.
    # @param id ID of the rating to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rating, Fixnum, Hash)>] Rating data, response status code and response headers
    def get_rating_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RatingsApi.get_rating ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RatingsApi.get_rating"
      end
      # resource path
      local_var_path = "/ratings/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_id']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rating')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatingsApi#get_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
